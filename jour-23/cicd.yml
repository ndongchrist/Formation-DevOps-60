
name: Django CI/CD Pipeline with Linting, Tests, and Celery

on:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/cicd.yml'

concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8 Linting
        run: flake8 . --max-line-length=88 --extend-ignore=E203

      - name: Upload Linting Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: |
            *.txt
            *.log

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          python manage.py test --verbosity=2 | tee test_report.txt
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          CELERY_BROKER_URL: redis://localhost:6379/0

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test_report.txt

      - name: Set Deployment Details
        run: |
          echo "COMMIT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
          echo "DATE=$(date)" >> $GITHUB_ENV
          echo "EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_ENV

      - name: Send Email Notification (Failure)
        if: failure()
        continue-on-error: true
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ Échec du Linting ou des Tests - Django App"
          to: "team@example.com, ${{ env.EMAIL }}"
          from: "GoldenBrain Tek CI/CD"
          body: |
            Bonjour,

            Le linting ou les tests ont échoué sur la branche main.
            Commit: ${{ env.COMMIT_HASH }}
            Date: ${{ env.DATE }}
            Auteur: ${{ env.EMAIL }}
            Repository: ${{ github.repository }}
            Lien: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Consultez les rapports joints.

            L'équipe DevOps @ GoldenBrain Tek
          attachments: test_report.txt

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Debug SSH Connection
        run: ssh -i ~/.ssh/id_ed25519 -o ServerAliveInterval=60 ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "echo '✅ Connexion SSH réussie'"

      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_ed25519 -o ServerAliveInterval=60 ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
            set -euo pipefail
            cd /var/www/myproject
            git pull origin main
            source venv/bin/activate
            pip install -r requirements.txt
            python manage.py migrate
            python manage.py collectstatic --noinput
            sudo systemctl restart gunicorn
            sudo systemctl restart celery
            sudo systemctl reload nginx
            echo "✅ Déploiement terminé !"
          EOF

      - name: Set Deployment Details
        run: |
          echo "COMMIT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
          echo "DATE=$(date)" >> $GITHUB_ENV
          echo "EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_ENV

      - name: Send Email Notification (Success)
        if: success()
        continue-on-error: true
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ Déploiement Réussi - Django App 🚀"
          to: "team@example.com, ${{ env.EMAIL }}"
          from: "GoldenBrain Tek CI/CD"
          body: |
            Bonjour,

            Déploiement réussi sur main !
            Commit: ${{ env.COMMIT_HASH }}
            Date: ${{ env.DATE }}
            Auteur: ${{ env.EMAIL }}
            Repository: ${{ github.repository }}
          

            Merci pour votre contribution ! Suivez GoldenBrain Tek pour plus de contenu DevOps.

            L'équipe DevOps @ GoldenBrain Tek
